<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPacRight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zuschauer = false;
client_id = 0;
direcktion_state = "right";
grid_size = 64;
move_speed = 4;
hsp = 0;
vspe = 0;
is_moving = false;
move_timer = grid_size;

points = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move the Player
key_left = keyboard_check(vk_left)||keyboard_check(ord("A"));
key_right = keyboard_check(vk_right)||keyboard_check(ord("D"));
key_up = keyboard_check(vk_up)||keyboard_check(ord("W"));
key_down = keyboard_check(vk_down)||keyboard_check(ord("S"));
if(!is_moving){
    if(key_left){
        is_moving = true;
        move_timer = grid_size;
        hsp = -move_speed;
        vsp = 0;
        direcktion_state = "left";
    } else if(key_right){
        is_moving = true;
        move_timer = grid_size;
        hsp = move_speed;
        vsp = 0;
        direcktion_state = "right";
    } else if(key_up){
        is_moving = true;
        move_timer = grid_size;
        hsp = 0;
        vsp = -move_speed;
        direcktion_state = "up";
    } else if(key_down){
        is_moving = true;
        move_timer = grid_size;
        hsp = 0;
        vsp = move_speed;
        direcktion_state = "down";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Detection and movement
if(is_moving){
    if(move_timer &gt; 0) {
        if(place_meeting(x + hsp, y, oWallParrent)){
            hsp = 0;
            move_timer = 0;
        }
        x += hsp;
        if(place_meeting(x,y + vsp, oWallParrent)){
            vsp = 0;
            move_timer = 0;
        }
        y += vsp;
        move_timer -= move_speed;
    } else {
        is_moving = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check Collision with Collectables
if(place_meeting(x,y,oCollectablesParrent)){
    var coll = instance_nearest(x, y, oCollectablesParrent);
    
    points += coll.points;
    
    with(coll){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate the Pac
if(client_id == 0){
    if(direcktion_state == "right"){
        sprite_index = sPacRight;
    }else if(direcktion_state == "left"){
        sprite_index = sPacLeft;
    }else if(direcktion_state == "down"){
        sprite_index = sPacDown;
    }else if(direcktion_state == "up"){
        sprite_index = sPacUp;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animate the Ghost
if(sprite_index == sGhost1||sprite_index == sGhost2||sprite_index == sGhost3||sprite_index == sGhost4){
    if(image_index == 8){
        image_index = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(40,10, "Points: " + string(points));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
switch(client_id){
    case 0:
        sprite_index = sPacRight;
    break;
    case 1:
        sprite_index = sGhost1;
    break;
    case 2:
        sprite_index = sGhost2;
    break;
    case 3:
        sprite_index = sGhost3;
    break;
    case 4:
        sprite_index = sGhost4;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
